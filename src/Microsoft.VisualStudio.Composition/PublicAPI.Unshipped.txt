Microsoft.VisualStudio.Composition.ComposablePartDefinition.ComposablePartDefinition(Microsoft.VisualStudio.Composition.Reflection.TypeRef partType, System.Collections.Generic.IReadOnlyDictionary<string, object> metadata, System.Collections.Generic.IReadOnlyCollection<Microsoft.VisualStudio.Composition.ExportDefinition> exportedTypes, System.Collections.Generic.IReadOnlyDictionary<Microsoft.VisualStudio.Composition.Reflection.MemberRef, System.Collections.Generic.IReadOnlyCollection<Microsoft.VisualStudio.Composition.ExportDefinition>> exportingMembers, System.Collections.Generic.IEnumerable<Microsoft.VisualStudio.Composition.ImportDefinitionBinding> importingMembers, string sharingBoundary, Microsoft.VisualStudio.Composition.Reflection.MethodRef onImportsSatisfied, Microsoft.VisualStudio.Composition.Reflection.MethodRef importingConstructorRef, System.Collections.Generic.IReadOnlyList<Microsoft.VisualStudio.Composition.ImportDefinitionBinding> importingConstructorImports, Microsoft.VisualStudio.Composition.CreationPolicy partCreationPolicy, System.Collections.Generic.IEnumerable<System.Reflection.AssemblyName> extraInputAssemblies, bool isSharingBoundaryInferred = false) -> void
Microsoft.VisualStudio.Composition.ComposablePartDefinition.ComposablePartDefinition(Microsoft.VisualStudio.Composition.Reflection.TypeRef partType, System.Collections.Generic.IReadOnlyDictionary<string, object> metadata, System.Collections.Generic.IReadOnlyCollection<Microsoft.VisualStudio.Composition.ExportDefinition> exportedTypes, System.Collections.Generic.IReadOnlyDictionary<Microsoft.VisualStudio.Composition.Reflection.MemberRef, System.Collections.Generic.IReadOnlyCollection<Microsoft.VisualStudio.Composition.ExportDefinition>> exportingMembers, System.Collections.Generic.IEnumerable<Microsoft.VisualStudio.Composition.ImportDefinitionBinding> importingMembers, string sharingBoundary, Microsoft.VisualStudio.Composition.Reflection.MethodRef onImportsSatisfied, Microsoft.VisualStudio.Composition.Reflection.MethodRef importingConstructorRef, System.Collections.Generic.IReadOnlyList<Microsoft.VisualStudio.Composition.ImportDefinitionBinding> importingConstructorImports, Microsoft.VisualStudio.Composition.CreationPolicy partCreationPolicy, bool isSharingBoundaryInferred = false) -> void
Microsoft.VisualStudio.Composition.ComposablePartDefinition.ImportingConstructorOrFactory.get -> System.Reflection.MethodBase
Microsoft.VisualStudio.Composition.ComposablePartDefinition.ImportingConstructorOrFactoryRef.get -> Microsoft.VisualStudio.Composition.Reflection.MethodRef
Microsoft.VisualStudio.Composition.ImportDefinitionBinding.ImportDefinitionBinding(Microsoft.VisualStudio.Composition.ImportDefinition importDefinition, Microsoft.VisualStudio.Composition.Reflection.TypeRef composablePartType, Microsoft.VisualStudio.Composition.Reflection.MemberRef importingMember, Microsoft.VisualStudio.Composition.Reflection.TypeRef importingSiteTypeRef, Microsoft.VisualStudio.Composition.Reflection.TypeRef importingSiteTypeWithoutCollectionRef) -> void
Microsoft.VisualStudio.Composition.ImportDefinitionBinding.ImportDefinitionBinding(Microsoft.VisualStudio.Composition.ImportDefinition importDefinition, Microsoft.VisualStudio.Composition.Reflection.TypeRef composablePartType, Microsoft.VisualStudio.Composition.Reflection.ParameterRef importingConstructorParameter, Microsoft.VisualStudio.Composition.Reflection.TypeRef importingSiteTypeRef, Microsoft.VisualStudio.Composition.Reflection.TypeRef importingSiteTypeWithoutCollectionRef) -> void
Microsoft.VisualStudio.Composition.ImportDefinitionBinding.ImportingSiteElementTypeRef.get -> Microsoft.VisualStudio.Composition.Reflection.TypeRef
Microsoft.VisualStudio.Composition.ImportDefinitionBinding.ImportingSiteTypeWithoutCollectionRef.get -> Microsoft.VisualStudio.Composition.Reflection.TypeRef
Microsoft.VisualStudio.Composition.ImportMetadataViewConstraint.ImportMetadataViewConstraint(System.Collections.Generic.IReadOnlyDictionary<string, Microsoft.VisualStudio.Composition.ImportMetadataViewConstraint.MetadatumRequirement> metadataNamesAndTypes, Microsoft.VisualStudio.Composition.Resolver resolver) -> void
Microsoft.VisualStudio.Composition.ImportMetadataViewConstraint.Resolver.get -> Microsoft.VisualStudio.Composition.Resolver
Microsoft.VisualStudio.Composition.Reflection.FieldRef.Equals(Microsoft.VisualStudio.Composition.Reflection.FieldRef fieldRef) -> bool
Microsoft.VisualStudio.Composition.Reflection.FieldRef.FieldInfo.get -> System.Reflection.FieldInfo
Microsoft.VisualStudio.Composition.Reflection.FieldRef.FieldRef(Microsoft.VisualStudio.Composition.Reflection.TypeRef declaringType, Microsoft.VisualStudio.Composition.Reflection.TypeRef fieldTypeRef, int metadataToken, string name, bool isStatic) -> void
Microsoft.VisualStudio.Composition.Reflection.FieldRef.FieldTypeRef.get -> Microsoft.VisualStudio.Composition.Reflection.TypeRef
Microsoft.VisualStudio.Composition.Reflection.MemberRef.AssemblyName.get -> System.Reflection.AssemblyName
Microsoft.VisualStudio.Composition.Reflection.MemberRef.IsStatic.get -> bool
Microsoft.VisualStudio.Composition.Reflection.MemberRef.MemberInfo.get -> System.Reflection.MemberInfo
Microsoft.VisualStudio.Composition.Reflection.MemberRef.MemberRef(Microsoft.VisualStudio.Composition.Reflection.TypeRef declaringType, System.Reflection.MemberInfo memberInfo) -> void
Microsoft.VisualStudio.Composition.Reflection.MemberRef.MemberRef(Microsoft.VisualStudio.Composition.Reflection.TypeRef declaringType, int metadataToken, bool isStatic) -> void
Microsoft.VisualStudio.Composition.Reflection.MemberRef.MemberRef(System.Reflection.MemberInfo memberInfo, Microsoft.VisualStudio.Composition.Resolver resolver) -> void
Microsoft.VisualStudio.Composition.Reflection.MemberRef.MetadataToken.get -> int
Microsoft.VisualStudio.Composition.Reflection.MethodRef.Equals(Microsoft.VisualStudio.Composition.Reflection.MethodRef other) -> bool
Microsoft.VisualStudio.Composition.Reflection.MethodRef.MethodBase.get -> System.Reflection.MethodBase
Microsoft.VisualStudio.Composition.Reflection.MethodRef.MethodBaseNoResolve.get -> System.Reflection.MethodBase
Microsoft.VisualStudio.Composition.Reflection.MethodRef.MethodRef(Microsoft.VisualStudio.Composition.Reflection.TypeRef declaringType, int metadataToken, string name, bool isStatic, System.Collections.Immutable.ImmutableArray<Microsoft.VisualStudio.Composition.Reflection.TypeRef> parameterTypes, System.Collections.Immutable.ImmutableArray<Microsoft.VisualStudio.Composition.Reflection.TypeRef> genericMethodArguments) -> void
Microsoft.VisualStudio.Composition.Reflection.MethodRef.MethodRef(System.Reflection.ConstructorInfo constructor, Microsoft.VisualStudio.Composition.Resolver resolver) -> void
Microsoft.VisualStudio.Composition.Reflection.MethodRef.MethodRef(System.Reflection.MethodBase method, Microsoft.VisualStudio.Composition.Resolver resolver) -> void
Microsoft.VisualStudio.Composition.Reflection.MethodRef.MethodRef(System.Reflection.MethodBase method, Microsoft.VisualStudio.Composition.Resolver resolver, System.Collections.Immutable.ImmutableArray<Microsoft.VisualStudio.Composition.Reflection.TypeRef> parameterTypes) -> void
Microsoft.VisualStudio.Composition.Reflection.MethodRef.ParameterTypes.get -> System.Collections.Immutable.ImmutableArray<Microsoft.VisualStudio.Composition.Reflection.TypeRef>
Microsoft.VisualStudio.Composition.Reflection.ParameterRef.Equals(Microsoft.VisualStudio.Composition.Reflection.ParameterRef other) -> bool
Microsoft.VisualStudio.Composition.Reflection.ParameterRef.Method.get -> Microsoft.VisualStudio.Composition.Reflection.MethodRef
Microsoft.VisualStudio.Composition.Reflection.ParameterRef.ParameterInfo.get -> System.Reflection.ParameterInfo
Microsoft.VisualStudio.Composition.Reflection.ParameterRef.ParameterRef(Microsoft.VisualStudio.Composition.Reflection.MethodRef method, int parameterIndex) -> void
Microsoft.VisualStudio.Composition.Reflection.ParameterRef.ParameterRef(System.Reflection.ParameterInfo parameterInfo, Microsoft.VisualStudio.Composition.Resolver resolver) -> void
Microsoft.VisualStudio.Composition.Reflection.PropertyRef.Equals(Microsoft.VisualStudio.Composition.Reflection.PropertyRef other) -> bool
Microsoft.VisualStudio.Composition.Reflection.PropertyRef.PropertyInfo.get -> System.Reflection.PropertyInfo
Microsoft.VisualStudio.Composition.Reflection.PropertyRef.PropertyRef(Microsoft.VisualStudio.Composition.Reflection.TypeRef declaringType, Microsoft.VisualStudio.Composition.Reflection.TypeRef propertyTypeRef, int metadataToken, int? getMethodMetadataToken, int? setMethodMetadataToken, string name, bool isStatic) -> void
Microsoft.VisualStudio.Composition.Reflection.PropertyRef.PropertyTypeRef.get -> Microsoft.VisualStudio.Composition.Reflection.TypeRef
Microsoft.VisualStudio.Composition.Reflection.TypeRef.AssemblyId.get -> Microsoft.VisualStudio.Composition.StrongAssemblyIdentity
Microsoft.VisualStudio.Composition.Reflection.TypeRef.BaseTypes.get -> System.Collections.Immutable.ImmutableArray<Microsoft.VisualStudio.Composition.Reflection.TypeRef>
Microsoft.VisualStudio.Composition.Reflection.TypeRef.ElementTypeRef.get -> Microsoft.VisualStudio.Composition.Reflection.TypeRef
Microsoft.VisualStudio.Composition.Reflection.TypeRef.FullName.get -> string
Microsoft.VisualStudio.Composition.Reflection.TypeRef.IsAssignableFrom(Microsoft.VisualStudio.Composition.Reflection.TypeRef other) -> bool
Microsoft.VisualStudio.Composition.Reflection.TypeRef.IsGenericType.get -> bool
Microsoft.VisualStudio.Composition.Reflection.TypeRef.IsShallow.get -> bool
Microsoft.VisualStudio.Composition.Reflection.TypeRef.IsValueType.get -> bool
Microsoft.VisualStudio.Composition.Reflection.TypeRef.TypeFlags.get -> Microsoft.VisualStudio.Composition.Reflection.TypeRefFlags
Microsoft.VisualStudio.Composition.Reflection.TypeRefFlags
Microsoft.VisualStudio.Composition.Reflection.TypeRefFlags.Array = 1 -> Microsoft.VisualStudio.Composition.Reflection.TypeRefFlags
Microsoft.VisualStudio.Composition.Reflection.TypeRefFlags.IsValueType = 2 -> Microsoft.VisualStudio.Composition.Reflection.TypeRefFlags
Microsoft.VisualStudio.Composition.Reflection.TypeRefFlags.None = 0 -> Microsoft.VisualStudio.Composition.Reflection.TypeRefFlags
Microsoft.VisualStudio.Composition.RuntimeComposition.RuntimeExport.ExportedValueType.get -> System.Type
Microsoft.VisualStudio.Composition.RuntimeComposition.RuntimeExport.RuntimeExport(string contractName, Microsoft.VisualStudio.Composition.Reflection.TypeRef declaringTypeRef, Microsoft.VisualStudio.Composition.Reflection.MemberRef memberRef, System.Collections.Generic.IReadOnlyDictionary<string, object> metadata) -> void
Microsoft.VisualStudio.Composition.RuntimeComposition.RuntimeImport.ImportingSiteTypeWithoutCollectionRef.get -> Microsoft.VisualStudio.Composition.Reflection.TypeRef
Microsoft.VisualStudio.Composition.RuntimeComposition.RuntimeImport.RuntimeImport(Microsoft.VisualStudio.Composition.Reflection.MemberRef importingMemberRef, Microsoft.VisualStudio.Composition.Reflection.TypeRef importingSiteTypeRef, Microsoft.VisualStudio.Composition.Reflection.TypeRef importingSiteTypeWithoutCollectionRef, Microsoft.VisualStudio.Composition.ImportCardinality cardinality, System.Collections.Generic.IReadOnlyList<Microsoft.VisualStudio.Composition.RuntimeComposition.RuntimeExport> satisfyingExports, bool isNonSharedInstanceRequired, bool isExportFactory, System.Collections.Generic.IReadOnlyDictionary<string, object> metadata, System.Collections.Generic.IReadOnlyCollection<string> exportFactorySharingBoundaries) -> void
Microsoft.VisualStudio.Composition.RuntimeComposition.RuntimeImport.RuntimeImport(Microsoft.VisualStudio.Composition.Reflection.ParameterRef importingParameterRef, Microsoft.VisualStudio.Composition.Reflection.TypeRef importingSiteTypeRef, Microsoft.VisualStudio.Composition.Reflection.TypeRef importingSiteTypeWithoutCollectionRef, Microsoft.VisualStudio.Composition.ImportCardinality cardinality, System.Collections.Generic.IReadOnlyList<Microsoft.VisualStudio.Composition.RuntimeComposition.RuntimeExport> satisfyingExports, bool isNonSharedInstanceRequired, bool isExportFactory, System.Collections.Generic.IReadOnlyDictionary<string, object> metadata, System.Collections.Generic.IReadOnlyCollection<string> exportFactorySharingBoundaries) -> void
Microsoft.VisualStudio.Composition.RuntimeComposition.RuntimePart.ImportingConstructorOrFactoryMethod.get -> System.Reflection.MethodBase
Microsoft.VisualStudio.Composition.RuntimeComposition.RuntimePart.ImportingConstructorOrFactoryMethodRef.get -> Microsoft.VisualStudio.Composition.Reflection.MethodRef
Microsoft.VisualStudio.Composition.RuntimeComposition.RuntimePart.RuntimePart(Microsoft.VisualStudio.Composition.Reflection.TypeRef type, Microsoft.VisualStudio.Composition.Reflection.MethodRef importingConstructor, System.Collections.Generic.IReadOnlyList<Microsoft.VisualStudio.Composition.RuntimeComposition.RuntimeImport> importingConstructorArguments, System.Collections.Generic.IReadOnlyList<Microsoft.VisualStudio.Composition.RuntimeComposition.RuntimeImport> importingMembers, System.Collections.Generic.IReadOnlyList<Microsoft.VisualStudio.Composition.RuntimeComposition.RuntimeExport> exports, Microsoft.VisualStudio.Composition.Reflection.MethodRef onImportsSatisfied, string sharingBoundary) -> void
Microsoft.VisualStudio.Composition.StrongAssemblyIdentity
Microsoft.VisualStudio.Composition.StrongAssemblyIdentity.Equals(Microsoft.VisualStudio.Composition.StrongAssemblyIdentity other) -> bool
Microsoft.VisualStudio.Composition.StrongAssemblyIdentity.Mvid.get -> System.Guid
Microsoft.VisualStudio.Composition.StrongAssemblyIdentity.Name.get -> System.Reflection.AssemblyName
Microsoft.VisualStudio.Composition.StrongAssemblyIdentity.StrongAssemblyIdentity(System.Reflection.AssemblyName name, System.Guid mvid) -> void
abstract Microsoft.VisualStudio.Composition.Reflection.MemberRef.EqualsByTypeLocalMetadata(Microsoft.VisualStudio.Composition.Reflection.MemberRef other) -> bool
abstract Microsoft.VisualStudio.Composition.Reflection.MemberRef.Name.get -> string
abstract Microsoft.VisualStudio.Composition.Reflection.MemberRef.Resolve() -> System.Reflection.MemberInfo
override Microsoft.VisualStudio.Composition.Reflection.FieldRef.EqualsByTypeLocalMetadata(Microsoft.VisualStudio.Composition.Reflection.MemberRef other) -> bool
override Microsoft.VisualStudio.Composition.Reflection.FieldRef.Name.get -> string
override Microsoft.VisualStudio.Composition.Reflection.FieldRef.Resolve() -> System.Reflection.MemberInfo
override Microsoft.VisualStudio.Composition.Reflection.MethodRef.EqualsByTypeLocalMetadata(Microsoft.VisualStudio.Composition.Reflection.MemberRef other) -> bool
override Microsoft.VisualStudio.Composition.Reflection.MethodRef.Name.get -> string
override Microsoft.VisualStudio.Composition.Reflection.MethodRef.Resolve() -> System.Reflection.MemberInfo
override Microsoft.VisualStudio.Composition.Reflection.PropertyRef.EqualsByTypeLocalMetadata(Microsoft.VisualStudio.Composition.Reflection.MemberRef other) -> bool
override Microsoft.VisualStudio.Composition.Reflection.PropertyRef.Name.get -> string
override Microsoft.VisualStudio.Composition.Reflection.PropertyRef.Resolve() -> System.Reflection.MemberInfo
override Microsoft.VisualStudio.Composition.StrongAssemblyIdentity.Equals(object obj) -> bool
override Microsoft.VisualStudio.Composition.StrongAssemblyIdentity.GetHashCode() -> int
static Microsoft.VisualStudio.Composition.PartDiscovery.GetImportingSiteTypeWithoutCollection(Microsoft.VisualStudio.Composition.ImportDefinition importDefinition, System.Type importingSiteType) -> System.Type
static Microsoft.VisualStudio.Composition.PartDiscovery.GetTypeIdentityFromImportingTypeRef(Microsoft.VisualStudio.Composition.Reflection.TypeRef typeRef, bool importMany) -> Microsoft.VisualStudio.Composition.Reflection.TypeRef
static Microsoft.VisualStudio.Composition.Reflection.MethodRef.Get(System.Reflection.MethodBase method, Microsoft.VisualStudio.Composition.Resolver resolver) -> Microsoft.VisualStudio.Composition.Reflection.MethodRef
static Microsoft.VisualStudio.Composition.Reflection.ResolverExtensions.Resolve(this Microsoft.VisualStudio.Composition.Reflection.MethodRef methodRef) -> System.Reflection.MethodBase
static Microsoft.VisualStudio.Composition.Reflection.TypeRef.Get(Microsoft.VisualStudio.Composition.Resolver resolver, Microsoft.VisualStudio.Composition.StrongAssemblyIdentity assemblyId, int metadataToken, string fullName, Microsoft.VisualStudio.Composition.Reflection.TypeRefFlags typeFlags, int genericTypeParameterCount, System.Collections.Immutable.ImmutableArray<Microsoft.VisualStudio.Composition.Reflection.TypeRef> genericTypeArguments, bool shallow, System.Collections.Immutable.ImmutableArray<Microsoft.VisualStudio.Composition.Reflection.TypeRef> baseTypes, Microsoft.VisualStudio.Composition.Reflection.TypeRef elementTypeRef) -> Microsoft.VisualStudio.Composition.Reflection.TypeRef
static Microsoft.VisualStudio.Composition.Reflection.TypeRef.Get(Microsoft.VisualStudio.Composition.Resolver resolver, System.Reflection.AssemblyName assemblyName, int metadataToken, string fullName, Microsoft.VisualStudio.Composition.Reflection.TypeRefFlags typeFlags, int genericTypeParameterCount, System.Collections.Immutable.ImmutableArray<Microsoft.VisualStudio.Composition.Reflection.TypeRef> genericTypeArguments, bool shallow, System.Collections.Immutable.ImmutableArray<Microsoft.VisualStudio.Composition.Reflection.TypeRef> baseTypes, Microsoft.VisualStudio.Composition.Reflection.TypeRef elementTypeRef) -> Microsoft.VisualStudio.Composition.Reflection.TypeRef
static Microsoft.VisualStudio.Composition.StrongAssemblyIdentity.CreateFrom(System.Reflection.Assembly assembly, System.Reflection.AssemblyName assemblyName) -> Microsoft.VisualStudio.Composition.StrongAssemblyIdentity
static Microsoft.VisualStudio.Composition.StrongAssemblyIdentity.CreateFrom(string assemblyFile, System.Reflection.AssemblyName assemblyName) -> Microsoft.VisualStudio.Composition.StrongAssemblyIdentity
virtual Microsoft.VisualStudio.Composition.PartDiscovery.ThrowOnInvalidExportingMember(System.Reflection.ICustomAttributeProvider member) -> void
virtual Microsoft.VisualStudio.Composition.PartDiscovery.ThrowOnInvalidImportingMemberOrParameter(System.Reflection.ICustomAttributeProvider member, bool isImportMany) -> void
virtual Microsoft.VisualStudio.Composition.Reflection.MemberRef.Equals(Microsoft.VisualStudio.Composition.Reflection.MemberRef other) -> bool