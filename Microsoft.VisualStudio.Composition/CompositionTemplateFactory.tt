<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using Microsoft.VisualStudio.Composition;

internal class CompiledExportFactory : ExportFactory
{
	protected override object GetExport(Type type)
	{<#
foreach (var part in this.Parts)
{
	foreach (var exportDefinition in part.ExportDefinitions)
	{
#>

		if (type.IsEquivalentTo(typeof(<#= exportDefinition.Contract.Type.FullName #>)))
		{
			return this.GetOrCreate<#= part.Id #>();
		}
<#
	}
}
#>

		throw new ArgumentException();
	}
<#
foreach (var part in this.Parts) 
{
#>

	protected <#= part.Type.FullName #> GetOrCreate<#= part.Id #>()
	{
		var result = new <#= part.Type.FullName #>();
		return result;
	}
<#
}
#>
}

<#+
	public IReadOnlyCollection<ComposablePart> Parts { get; set; }
#>