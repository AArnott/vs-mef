<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using Microsoft.VisualStudio.Composition;

internal class CompiledExportFactory : ExportFactory
{
	protected override object GetExport(Type type)
	{<#
foreach (var part in this.Configuration.Parts)
{
	foreach (var exportDefinition in part.ExportDefinitions)
	{
#>

		if (type.IsEquivalentTo(typeof(<#= GetTypeName(exportDefinition.Contract.Type) #>)))
		{
			return this.GetOrCreate<#= part.Id #>();
		}
<#
	}
}
#>

		throw new ArgumentException();
	}
<#
foreach (var part in this.Configuration.Parts) 
{
#>

	protected <#= GetTypeName(part.Type) #> GetOrCreate<#= part.Id #>()
	{
		var result = new <#= GetTypeName(part.Type) #>();
<#
	foreach (var import in part.ImportDefinitions)
	{
		var exportingParts = this.Configuration.GetPartsWithExportsSatisfying(import.Value);
		if (exportingParts.Any())
		{
#>
		result.<#= import.Key.Name #> = this.GetOrCreate<#= exportingParts.Single().Id #>();
<#
		}
	}
#>
		return result;
	}
<#
}
#>
}

<#+
	public CompositionConfiguration Configuration { get; set; }

	private static string GetTypeName(Type type)
	{
		if (type.DeclaringType != null)
		{
			return GetTypeName(type.DeclaringType) + "." + type.Name;
		}
		else
		{
			return type.FullName;
		}
	}
#>