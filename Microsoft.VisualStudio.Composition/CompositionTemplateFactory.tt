<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.Composition;

internal class CompiledExportFactory : ExportFactory {
	public override T GetExport<T>()
	{
<#
foreach (var part in this.Parts) 
{
#>
		if (typeof(T).IsEquivalentTo(typeof(<#= part.FullName #>)))
		{
			return (T)(object)new <#= part.FullName #>();
		}
<#
}
#>

		throw new ArgumentException();
	}
}

<#+
	public IReadOnlyList<Type> Parts { get; set; }
#>